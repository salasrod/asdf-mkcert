#!/usr/bin/env bash

# Documentation originally from: https://github.com/asdf-vm/asdf/blob/master/docs/plugins-create.md
#
# This script should install the version, in the path mentioned in ASDF_INSTALL_PATH.
#
# The install script should exit with a status of 0 when the installation is successful.
# If the installation fails the script should exit with any non-zero exit status.
#
# If possible the script should only place files in the ASDF_INSTALL_PATH directory once
# the build and installation of the tool is deemed successful by the install script.
# asdf checks for the existence of the ASDF_INSTALL_PATH directory in order to determine
# if that version of the tool is installed. If the ASDF_INSTALL_PATH directory is populated
# at the beginning of the installation process other asdf commands run in other terminals
# during the installation may consider that version of the tool installed,
# even when it is not fully installed.

set -e
set -o pipefail

github_coordinates="FiloSottile/mkcert"
tool_name="mkcert"

install_tool() {
  local version=$2
  local install_path=$3
  local tmp_download_dir=$4
  local binary_name=$5

  local platform
  local bin_install_path="$install_path/bin"
  local binary_path="$bin_install_path/${binary_name}"
  local download_url
  local download_path

  platform=$(get_platform)-$(get_arch)
  download_url=$(get_download_url "$version" "$platform" "$binary_name")
  download_path="$tmp_download_dir/"$(get_filename "$version" "$platform" "$binary_name")

  echo "Downloading [${binary_name}] from ${download_url} to ${download_path}"
  curl -Lo "$download_path" "$download_url"

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Cleaning previous binaries"
  rm -f "$binary_path" 2>/dev/null || true

  echo "Copying binary"
  cp "${download_path}" "${binary_path}"
  chmod +x "${binary_path}"
}

get_platform() {
    if [[ "$(uname)" == "Linux" ]]
    then
        echo "linux"
    else
        echo "darwin"
    fi
}

get_arch() {
  local arch=$(uname -m)

  case $arch in
    amd64 | x86_64)
      echo 'amd64'
      ;;
    arm64 | aarch64)
      echo 'arm64'
      ;;
  esac
}

get_filename() {
  local version="$1"
  local platform="$2"
  local binary_name="$3"

  echo "${binary_name}-v${version}-${platform}"
}

get_download_url() {
  local version="$1"
  local platform="$2"
  local binary_name="$3"
  local filename
  filename="$(get_filename "$version" "$platform" "$binary_name")"

  echo "https://github.com/${github_coordinates}/releases/download/v${version}/${filename}"
}

tmp_download_dir="$(mktemp -d -t 'asdf_XXXXXXXX')"
trap 'rm -rf "${tmp_download_dir}"' EXIT
install_tool "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH" "$tmp_download_dir" "${tool_name}"
